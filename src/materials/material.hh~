/**
 * file   material.hh
 *
 * @author Till Junge <till.junge@epfl.ch>
 *
 * @date   25 Oct 2017
 *
 * @brief  Base class for materials (constitutive models)
 *
 * @section LICENCE
 *
 * Copyright (C) 2017 Till Junge
 *
 * µSpectre is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation, either version 3, or (at
 * your option) any later version.
 *
 * µSpectre is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with GNU Emacs; see the file COPYING. If not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

#include <string>

#include "common/common.hh"
#include "common/field_map_tensor.hh"


#ifndef MATERIAL_H
#define MATERIAL_H

namespace muSpectre {

  //! DimS spatial dimension (dimension of problem
  //! DimM material_dimension (dimension of constitutive law)
  template<Dim_t DimS, Dim_t DimM>
  class MaterialBase
  {
  public:
    //! Default constructor
    MaterialBase() = delete;

    //! Construct by name
    MaterialBase(std::string name);

    //! Copy constructor
    MaterialBase(const MaterialBase &other) = delete;

    //! Move constructor
    MaterialBase(MaterialBase &&other) noexcept = delete;

    //! Destructor
    virtual ~MaterialBase() noexcept = default;

    //! Copy assignment operator
    MaterialBase& operator=(const MaterialBase &other) = delete;

    //! Move assignment operator
    MaterialBase& operator=(MaterialBase &&other) noexcept = delete;


    //! take responsibility for a pixel identified by its cell coordinates
    void add_pixel(const Ccoord & ccord);

    //! allocate memory, etc
    virtual void initialize() = 0;

    //! computes the first Piola-Kirchhoff stress for finite strain problems
    template<Formulation form = Formulation::finite_strain>
    virtual void compute_stress(

  protected:
  private:
  };
}  // muSpectre

#endif /* MATERIAL_H */
