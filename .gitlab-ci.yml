stages:
  - build
  - test
  - wheel
  - deploy

variables:
  GIT_SUBMODULE_STRATEGY: recursive

.cmake_build:
  stage: build
  variables:
    BUILD_SYSTEM_NAME: cmake
  script:
#    - free -h
#    - df -h
#    - grep -c ^processor /proc/cpuinfo
    - mkdir build
    - cd build
    - echo "Build type ${BUILD_TYPE} -- additional flags ${CMAKE_ADDITIONAL_FLAGS}"
    - cmake -DCMAKE_BUILD_TYPE:STRING=${BUILD_TYPE}
            -DMUGRID_NETCDF_IO=ON
            -DMUSPECTRE_RUNNING_IN_CI=ON
            ${CMAKE_ADDITIONAL_FLAGS} ..
    - make -k
#    - df -h
  artifacts:
    when: on_success
    paths:
      - build
    exclude:
      - build/**/*.o
    expire_in: 5h

.meson_build:
  stage: build
  variables:
    BUILD_SYSTEM_NAME: meson
  script:
#    - free -h
#    - df -h
#    - grep -c ^processor /proc/cpuinfo
    - echo "Build type ${BUILD_TYPE} -- additional flags ${MESON_ADDITIONAL_FLAGS}"
    - python3 discover_version.py
    - meson setup --buildtype=${BUILD_TYPE} ${MESON_ADDITIONAL_FLAGS} build
    - cd build
    - meson compile
#    - df -h
  artifacts:
    when: on_success
    paths:
      - build
    exclude:
      - build/**/*.o
    expire_in: 5h

.pip_build:
  stage: build
  script:
    - free -h
    - grep -c ^processor /proc/cpuinfo
    - python3 -m venv venv
    - source venv/bin/activate
    - python3 -m pip install .
  artifacts:
    when: on_success
    paths:
      - venv
    expire_in: 5h

.cmake_tests:
  stage: test
  script:
    - cd build
    - ctest --output-on-failure
    - make test
    - echo "Build type ${BUILD_TYPE}"
    - if [ "${BUILD_TYPE}" = "Coverage" ]; then
    - gcovr --xml
            --gcov-executable "${GCOV_EXECUTABLE}"
            --output coverage.xml
            --object-directory ${CI_PROJECT_DIR}/build
            --root ${CI_PROJECT_DIR}  -s || true
    - fi
  artifacts:
    when: always
    paths:
      - build/tests/test_results*.xml
      - build/tests/libmufft/test_results*.xml
      - build/tests/libmugrid/test_results*.xml
    reports:
      junit:
        - build/tests/test_results*.xml
        - build/tests/libmufft/test_results*.xml
        - build/tests/libmugrid/test_results*.xml
      coverage_report:
        coverage_format: cobertura
        path: build/coverage.xml

.meson_tests:
  stage: test
  variables:
    # This is needed to force OpenMPI to run because tests are run as root
    OMPI_ALLOW_RUN_AS_ROOT: 1
    OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
  script:
    - SOURCE_DIRECTORY=$(pwd)
    - cd build
    - cat meson-info/meson-info.json | jq
    - ORIGINAL_SOURCE_DIRECTORY=$(cat meson-info/meson-info.json | jq .directories.source -r)
    - echo "Patching directories from ${ORIGINAL_SOURCE_DIRECTORY} to ${SOURCE_DIRECTORY}..."
    # We need to patch the directory as it has a randomized component on macOS runners
    - sed -i'' -e "s,${ORIGINAL_SOURCE_DIRECTORY},${SOURCE_DIRECTORY},g" *.json meson-info/*.json
    - cat meson-info/meson-info.json | jq
    - meson test -v --no-rebuild
    - echo "Build type ${BUILD_TYPE}"
    - if [ "${BUILD_TYPE}" = "Coverage" ]; then
    - gcovr --xml
            --gcov-executable "${GCOV_EXECUTABLE}"
            --output coverage.xml
            --object-directory ${CI_PROJECT_DIR}/build
            --root ${CI_PROJECT_DIR}  -s || true
    - fi
  
.pip_tests:
  stage: test
  script:
    # We simply test whether muSpectre imports without failure
    - source venv/bin/activate
    - python3 -c "import muSpectre"

.valgrind_muspectre:
  stage: test
  script:
    - cd build/tests
    - valgrind --track-origins=yes --leak-check=full --error-exitcode=1 ./main_test_suite

# ------------------------------------------------------------------------------
.compiler_ccache_gcc:
  variables:
    COMPILER_NAME: ccache-gcc
    CC: ccache gcc
    CXX: ccache g++
    GCOV_EXECUTABLE: gcov

.compiler_clang:
  variables:
    COMPILER_NAME: clang
    CC: clang
    CXX: clang++
    GCOV_EXECUTABLE: llvm-cov gcov

.compiler_ccache_clang:
  variables:
    COMPILER_NAME: ccache-clang
    CC: ccache clang
    CXX: ccache clang++
    GCOV_EXECUTABLE: llvm-cov gcov

.image_alpine:
  variables:
    IMAGE_NAME: alpine3.16
  image: registry.gitlab.com/muspectre/muspectre:alpine3.16

.image_debian_testing:
  variables:
    IMAGE_NAME: debian_testing
  image: registry.gitlab.com/muspectre/muspectre:debian_testing

.image_debian_stable:
  variables:
    IMAGE_NAME: debian_stable
  image: registry.gitlab.com/muspectre/muspectre:debian_stable

.image_macos:
  tags: [ saas-macos-medium-m1 ]
  image: macos-12-xcode-14 # https://docs.gitlab.com/ee/ci/runners/saas/macos/environment.html
  before_script:
    - export PATH="/Users/gitlab/Library/Python/3.9/bin:$PATH"
    - python3 -m site
    - python3 -m pip install --upgrade pip
    - python3 -m pip install meson ninja numpy scipy meshio uvw h5py jq
#  before_script:
#    - /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#    - brew install ccache

.cache_build:
  variables:
    CCACHE_BASEDIR: ${CI_PROJECT_DIR}/build
    CCACHE_DIR: ${CI_PROJECT_DIR}/.ccache
    CCACHE_MAXSIZE: 1Gi
  cache:
    key: ${IMAGE_NAME}_${BUILD_SYSTEM_NAME}_${COMPILER_NAME}${CACHE_PREFIX}
    policy: pull-push
    paths:
      - .ccache/
  before_script:
    - ccache --zero-stats || true
  after_script:
    - ccache --show-stats || true

# ------------------------------------------------------------------------------
#build:stable_cmake_gcc:
#  variables:
#    BUILD_TYPE: Release
#  extends:
#    - .cmake_build
#    - .cache_build
#    - .compiler_ccache_gcc
#    - .image_debian_stable

#test:stable_cmake_gcc:
#  extends:
#    - .cmake_tests
#    - .image_debian_stable
#  needs:
#    - job: build:stable_cmake_gcc
#      artifacts: true

# ------------------------------------------------------------------------------
#build:stable_cmake_split_gcc:
#  variables:
#    BUILD_TYPE: Release
#    CMAKE_ADDITIONAL_FLAGS: -DSPLIT_CELL=ON
#    CACHE_PREFIX: "_split"
#  extends:
#    - .cmake_build
#    - .cache_build
#    - .compiler_ccache_gcc
#    - .image_debian_stable

#test:stable_cmake_split_gcc:
#  variables:
#    BUILD_TYPE: Release
#  extends:
#    - .cmake_tests
#    - .image_debian_stable
#  needs:
#    - job: build:stable_cmake_split_gcc
#      artifacts: true

# ------------------------------------------------------------------------------
build:alpine_meson_gcc:
  variables:
    BUILD_TYPE: release
  extends:
    - .meson_build
    - .cache_build
    - .compiler_ccache_gcc
    - .image_alpine

test:alpine_meson_gcc:
  extends:
    - .meson_tests
    - .image_alpine
  needs:
    - job: build:alpine_meson_gcc
      artifacts: true

# ------------------------------------------------------------------------------
build:stable_meson_gcc:
  variables:
    BUILD_TYPE: release
  extends:
    - .meson_build
    - .cache_build
    - .compiler_ccache_gcc
    - .image_debian_stable

test:stable_meson_gcc:
  extends:
    - .meson_tests
    - .image_debian_stable
  needs:
    - job: build:stable_meson_gcc
      artifacts: true

# ------------------------------------------------------------------------------
build:stable_meson_clang:
  variables:
    BUILD_TYPE: release
  extends:
    - .meson_build
    - .cache_build
    - .compiler_ccache_clang
    - .image_debian_stable

test:stable_meson_clang:
  extends:
    - .meson_tests
    - .image_debian_stable
  needs:
    - job: build:stable_meson_clang
      artifacts: true

valgrind:stable_meson_clang:
  extends:
    - .valgrind_muspectre
    - .image_debian_stable
  needs:
    - job: build:stable_meson_clang
      artifacts: true

# ------------------------------------------------------------------------------
build:stable_pip:
  variables:
    BUILD_TYPE: release
  extends:
    - .pip_build
    - .image_debian_stable

test:stable_pip:
  extends:
    - .pip_tests
    - .image_debian_stable
  needs:
    - job: build:stable_pip
      artifacts: true

# ------------------------------------------------------------------------------
build:testing_meson_gcc:
  variables:
    BUILD_TYPE: release
  extends:
    - .meson_build
    - .cache_build
    - .compiler_ccache_gcc
    - .image_debian_testing

test:testing_meson_gcc:
  extends:
    - .meson_tests
    - .image_debian_testing
  needs:
    - job: build:testing_meson_gcc
      artifacts: true

# ------------------------------------------------------------------------------
build:macos_meson_clang:
  variables:
    BUILD_TYPE: release
  extends:
    - .image_macos
    - .meson_build
    - .compiler_clang

test:macos_meson_clang:
  extends:
    - .image_macos
    - .meson_tests
  needs:
    - job: build:macos_meson_clang
      artifacts: true

# ------------------------------------------------------------------------------
build:test_documention:
  stage: build
  image: registry.gitlab.com/muspectre/muspectre:debian_stable
  script:
    - mkdir build
    - cd build
    - cmake -DMUSPECTRE_MAKE_DOC_TARGET=ON ..
    - make dev_doc
  artifacts:
    paths:
      - build/doc/html

#------------------------------------------------------------------------------
wheel:linux:
  stage: wheel
  image: python:3.8
  # make a docker daemon available for cibuildwheel to use
  services:
    - name: docker:dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    # See https://github.com/docker-library/docker/pull/166
    DOCKER_TLS_CERTDIR: ""
    # meson-python needs Python 3.7 or larger
    CIBW_BUILD_VERBOSITY: 3
    CIBW_TEST_COMMAND: python {project}/tests/python_binding_tests.py
  parallel:
    matrix:
      - CIBW_BUILD:
        - cp37-manylinux*
        - cp38-manylinux*
        - cp39-manylinux*
        - cp310-manylinux*
        - cp311-manylinux*
        CIBW_ARCHS:
        - x86_64
        # - aarch64
  script:
    - curl -sSL https://get.docker.com/ | sh
    - python -m pip install cibuildwheel==2.11.3
    - LD_LIBRARY_PATH=$(python3 -m site --user-site) cibuildwheel --output-dir manylinux_wheels
  artifacts:
    paths:
      - manylinux_wheels/
  only:
    - master
    - tags

wheel:macos:
  stage: wheel
  extends:
    - .image_macos
  variables:
    CIBW_BUILD_VERBOSITY: 3
    #CIBW_TEST_COMMAND: python {project}/tests/python_binding_tests.py
  parallel:
    matrix:
      - CIBW_BUILD:
        - cp38-macos*
        - cp39-macos*
        - cp310-macos*
        - cp311-macos*
        CIBW_ARCHS:
        - x86_64
        - arm64
        CIBW_ENVIRONMENT_MACOS:
        - MACOSX_DEPLOYMENT_TARGET=10.15
        - MACOSX_DEPLOYMENT_TARGET=11.0
        - MACOSX_DEPLOYMENT_TARGET=12.0
        - MACOSX_DEPLOYMENT_TARGET=13.0
  script:
    - python3 -m pip install cibuildwheel==2.11.3
    - LD_LIBRARY_PATH=$(python3 -m site --user-site) cibuildwheel --output-dir macos_wheels
  #script:
  #  - python3 -m pip install build
  #  - python3 -m build -w -o macos_wheels .
  artifacts:
    paths:
      - macos_wheels/
#  only:
#    - master
#    - tags

#------------------------------------------------------------------------------
deploy:pages:
  stage: deploy
  image: registry.gitlab.com/muspectre/muspectre:debian_stable
  dependencies: []
  script:
    - mkdir build
    - cd build
    - cmake -DMUSPECTRE_MAKE_DOC_TARGET=ON ..
    - make dev_doc
    - mv doc/html ../public
  artifacts:
    paths:
      - public
  only:
    - master

deploy:pypi:
  stage: deploy
  image: registry.gitlab.com/muspectre/muspectre:debian_stable
  script:
    - python3 -m build . -s
    - python3 -m twine upload --verbose --non-interactive --username __token__ --password "$PYPI_PASSWORD" dist/* manylinux_wheels/* macos_wheels/*
  needs:
    - job: wheel:linux
      artifacts: true
    - job: wheel:macos
      artifacts: true
  only:
    - tags
